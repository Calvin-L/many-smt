#!/usr/bin/env python3

from typing import Union, TypeAlias, Sequence, Iterable, Optional, Tuple
import argparse
import selectors
import subprocess
import sys
import os
import io
import codecs
import shlex

# ----------------------------------------------------------------------
# Configuration

SOLVER_NAME    = "Many-SMT"
SOLVER_AUTHORS = "Calvin Loncaric"
SOLVER_VERSION = "??.??.??"

BUFFER_SIZE = 1024
DEBUG = False

# This tool only supports US-ASCII input, which is the "least common
# denominator" character set for SMT-LIB.  The SMT-LIB 2.6 standard has this to
# say on the subject (Section 3.1 "Lexicon"):
#
#  > SMT-LIB source files consist of Unicode characters in any 8-bit encoding,
#  > such as UTF-8, that extends the original 7-bit US-ASCII set.  While not
#  > technically Unicode, the ISO 8859-1 character set is also allowed since it
#  > coincides with the first 256 characters of UTF-8.
#
# Insane!  Since there is no option to declare the character set in an input,
# solvers have no way to determine if an input is UTF-8 or Calvin's-Crazy-
# Nonstandard-US-ASCII-Compatible-Charset.
#
# I would LIKE to support non-US characters in inputs, but given the vagueness
# of the standard I have decided that the best approach is to accept ONLY
# US-ASCII input.  This will cause the Many-SMT to reject inputs with
# non-US-ASCII characters, but it insulates us from weirdness if different
# solvers have different expectations about the input charset.

SMTLIB_CHARSET = "us-ascii"

# The INIT_COMMANDS are sent to each solver when it starts.

INIT_COMMANDS = [
    # Even though the standard says that :print-success starts out true, most
    # solvers don't have it enabled by default.  Many-SMT relies heavily on the
    # underlying solvers printing "success" after each command, so we have to
    # enable it manually.
    "(set-option :print-success true)\n",
]

# ----------------------------------------------------------------------
# Output

def emit_output(output: str) -> None:
    print(output)
    sys.stdout.flush()

def encode_smtlib_str(s: str) -> str:
    return '"{}"'.format(s.replace('"', '""'))

def output_error(message: str) -> None:
    emit_output('(error {})'.format(encode_smtlib_str(message)))

def die(message: str) -> None:
    output_error(message)
    sys.exit(1)

def set_debug(dbg: bool) -> None:
    global DEBUG
    DEBUG = dbg

def log(s: str) -> None:
    print(s, file=sys.stderr)

def log_warning(s: str) -> None:
    log("WARNING: {}".format(s))

def log_note(s: str) -> None:
    log(s)

def log_debug(s: str) -> None:
    if DEBUG:
        log(s)

# ----------------------------------------------------------------------
# S-expressions ("SExp")

SExp: TypeAlias = Union[str, list['SExp']]

def serialize_sexp(s: SExp) -> str:
    if isinstance(s, str):
        return s
    else:
        return '(' + ' '.join(serialize_sexp(x) for x in s) + ')'

# ----------------------------------------------------------------------
# Input parsing

class IncrementalSExpParser(object):
    __slots__ = (
        "incomplete_sexp",
        "incomplete_atom",
        "in_comment",
        "in_string",
        "in_string_after_double_quote",
        "paren_depth",
        "byte_decoder")

    def __init__(self) -> None:
        self.reset()

    def reset(self) -> None:
        self.incomplete_sexp: list[list[SExp]] = []
        self.incomplete_atom = ""
        self.in_comment = False
        self.in_string = False
        self.in_string_after_double_quote = False
        self.paren_depth = 0
        self.byte_decoder = codecs.getincrementaldecoder(SMTLIB_CHARSET)()

    def feed(self, text_bytes: bytes) -> list[SExp]:
        """
        Feed the given bytes to this parser, and return S-expressions found.

        This method is incremental; S-expressions may be split across multiple
        calls.
        """
        return list(self._feed(text_bytes))

    def feed_eof(self) -> list[SExp]:
        undecoded_bytes, _ = self.byte_decoder.getstate()
        if undecoded_bytes:
            raise Exception("premature EOF (did the input end with half of a multi-byte character?)")
        if self.incomplete_atom:
            if self.in_string_after_double_quote:
                self.incomplete_atom += '"'
            return [self._finish()]
        elif self.in_string:
            raise Exception("unclosed double-quote")
        elif self.paren_depth > 0:
            raise Exception("unclosed parentheses [depth={}, incomplete_sexp={!r}, incomplete_atom={!r}]".format(self.paren_depth, self.incomplete_sexp, self.incomplete_atom))
        else:
            return []

    def _finish(self) -> SExp:
        result: SExp
        if self.incomplete_sexp:
            result, = self.incomplete_sexp
        else:
            result = self.incomplete_atom
        self.reset()
        return result

    def _end_atom_or_string(self) -> Iterable[SExp]:
        if self.in_string_after_double_quote:
            self.incomplete_atom += '"'
            self.in_string_after_double_quote = False
            self.in_string = False
        if self.incomplete_atom and self.incomplete_sexp:
            self.incomplete_sexp[-1].append(self.incomplete_atom)
            self.incomplete_atom = ""
        if self.incomplete_atom and self.paren_depth == 0:
            yield self._finish()
        assert not self.incomplete_atom

    def _feed(self, text_bytes: bytes) -> Iterable[SExp]:
        for c in self.byte_decoder.decode(text_bytes):

            if self.in_comment:
                if c == "\n":
                    self.in_comment = False
                continue
            elif c == '"':
                if self.in_string_after_double_quote:
                    self.incomplete_atom += '""'
                    self.in_string_after_double_quote = False
                elif self.in_string:
                    self.in_string_after_double_quote = True
                else:
                    yield from self._end_atom_or_string()
                    self.in_string = True
                    self.incomplete_atom = c
                continue
            elif self.in_string_after_double_quote:
                yield from self._end_atom_or_string()
                assert not self.incomplete_atom
            elif self.in_string:
                self.incomplete_atom += c
                continue
            elif c == ";":
                yield from self._end_atom_or_string()
                self.in_comment = True
                continue

            if c == "(":
                yield from self._end_atom_or_string()
                self.incomplete_sexp.append([])
                self.paren_depth += 1
            elif c == ")":
                yield from self._end_atom_or_string()
                self.paren_depth -= 1
                if self.paren_depth == 0:
                    yield self._finish()
                else:
                    self.incomplete_sexp[-2].append(self.incomplete_sexp[-1])
                    self.incomplete_sexp.pop()
            elif c in " \t\r\n":
                yield from self._end_atom_or_string()
            else:
                self.incomplete_atom += c

def is_check_sat(sexp: SExp) -> bool:
    return isinstance(sexp, list) and len(sexp) >= 1 and sexp[0] in ("check-sat", "check-sat-assuming")

def is_inspect_command(sexp: SExp) -> bool:
    return isinstance(sexp, list) and len(sexp) >= 1 and sexp[0] in ("get-value", "get-assignment", "get-model", "get-unsat-assumptions", "get-proof", "get-unsat-core")

def is_echo(sexp: SExp) -> bool:
    return isinstance(sexp, list) and len(sexp) == 2 and sexp[0] == "echo"

def is_set_option(sexp: SExp) -> bool:
    return isinstance(sexp, list) and len(sexp) == 3 and sexp[0] == "set-option"

def is_get_info(sexp: SExp) -> bool:
    return isinstance(sexp, list) and len(sexp) > 1 and sexp[0] == "get-info"

def is_get_assertions(sexp: SExp) -> bool:
    return isinstance(sexp, list) and len(sexp) == 1 and sexp[0] == "get-assertions"

def is_reset(sexp: SExp) -> bool:
    return isinstance(sexp, list) and len(sexp) == 1 and sexp[0] == "reset"

def is_exit(sexp: SExp) -> bool:
    return isinstance(sexp, list) and len(sexp) == 1 and sexp[0] == "exit"

def is_error(sexp: SExp) -> bool:
    # NOTE: when CVC4 crashes, it outputs "error" instead of "(error ...)".
    return sexp == "error" or (isinstance(sexp, list) and len(sexp) >= 1 and sexp[0] == "error")

# ----------------------------------------------------------------------
# Solver processes

class SolverProcess(object):
    def __init__(self, args: Sequence[str]) -> None:
        self.alive = False
        self.args = args
        self.re_open()

    def __str__(self) -> str:
        return self.args[0]

    def close(self) -> None:
        # NOTE: if Popen throws an exception, self.proc is never set.
        if self.alive and hasattr(self, "proc"):
            log_debug("Stopping {}".format(self))
            self.proc.kill()
            self.alive = False
            self.inbox: Optional[IncrementalSExpParser] = None

    def re_open(self) -> None:
        assert not self.alive
        self.alive = True
        self.proc = subprocess.Popen(self.args, stdin=subprocess.PIPE, stdout=subprocess.PIPE, bufsize=0)
        self.inbox = IncrementalSExpParser()

    def send(self, cmd: str) -> None:
        if self.alive:
            proc_stdin = self.proc.stdin
            assert proc_stdin is not None # opened with stdin=PIPE
            try:
                log_debug("{} <-- {!r}".format(self, cmd))
                cmd_bytes = cmd.encode(SMTLIB_CHARSET)
                written = 0
                while written < len(cmd_bytes):
                    written += proc_stdin.write(cmd_bytes[written:])
                proc_stdin.flush()
            except Exception as e:
                log_warning("Error while writing to {}: {}".format(self, e))
                self.close()

    def abort_check_sat(self, commands_so_far: Sequence[str]) -> None:
        log_debug("Aborting {} (check-sat)".format(self))
        self.close()

        try:
            self.re_open()
            for cmd in commands_so_far:
                self.send(cmd)
                sync([self])

            # Send one additional no-op command so that abort_check_sat acts
            # like a regular `send`.  We should expect "success" as the next
            # output from this solver.
            self.send('(assert true)\n')

        except Exception as e:
            log_warning("Error from {} while replaying commands after abort: {}".format(self, e))
            self.close()

    def make_read_progress(self) -> Iterable[SExp]:
        if not self.alive:
            log_warning("Tried to read from dead solver {}".format(self))
            yield "error"
            return
        assert self.inbox is not None # non-none when self.alive
        proc_stdout = self.proc.stdout
        assert proc_stdout is not None # opened with stdout=PIPE
        try:
            block = proc_stdout.read(BUFFER_SIZE)
            if block:
                for out in self.inbox.feed(block):
                    log_debug("{} --> {!r}".format(self, out))
                    yield out
            else:
                log_debug("Solver {} has stopped sending output".format(self))
                self.close()
        except Exception as e:
            log_warning("Error while reading from {}: {}".format(self, e))
            self.close()

    def __del__(self) -> None:
        self.close()

DEFAULT_SOLVERS = [
    ["boolector", "--smt2", "--incremental"],
    ["cvc4", "--lang=smtlib2.6", "--incremental"],
    ["cvc5", "--lang=smtlib2.6", "--incremental"],
    ["yices-smt2", "--incremental"],
    ["z3", "-smt2", "-in"],
]

def decode_solvers(config: str) -> list[list[str]]:
    return [shlex.split(argv) for argv in config.split(";") if argv.strip()]

def encode_solvers(solvers: list[list[str]]) -> str:
    return "; ".join([" ".join(shlex.quote(a) for a in argv) for argv in solvers])

assert decode_solvers(encode_solvers(DEFAULT_SOLVERS)) == DEFAULT_SOLVERS
assert decode_solvers(";s1 'arg1';;s2;") == [["s1", "arg1"], ["s2"]]
assert decode_solvers(" ") == []

# ----------------------------------------------------------------------
# Batch commands for interacting with multiple solvers

def next_response(solvers: Sequence[SolverProcess]) -> Tuple[SolverProcess, SExp]:
    """
    Returns the first complete S-expression output by any of the given solvers.

    Blocks until at least one solver produces a complete S-expression.
    """
    with selectors.DefaultSelector() as sel:
        for s in solvers:
            stdout = s.proc.stdout
            assert stdout is not None # opened with stdout=PIPE
            sel.register(stdout, selectors.EVENT_READ, data=s)
        while True:
            log_debug("Waiting [next_response]...")
            for selectkey, events in sel.select():
                solver = selectkey.data
                for res in solver.make_read_progress():
                    return (solver, res)

def sync(solvers: Sequence[SolverProcess]) -> None:
    """
    Wait until all the given solvers output a complete S-expression.

    Closes any solvers that report an error.
    """
    n = len(solvers)
    with selectors.DefaultSelector() as sel:
        for s in solvers:
            stdout = s.proc.stdout
            assert stdout is not None # opened with stdout=PIPE
            sel.register(   stdout, selectors.EVENT_READ, data=s)
        while n > 0:
            log_debug("Waiting [sync]...")
            for selectkey, events in sel.select():
                solver = selectkey.data
                for res in solver.make_read_progress():
                    sel.unregister(selectkey.fileobj)
                    n -= 1
                    if is_error(res):
                        log_warning("Solver {} reports error {!r}".format(solver, res))
                        solver.close()
                    break

# ----------------------------------------------------------------------
# Main class
#
# As much as possible, Many-SMT tries to let the underlying solvers handle the
# state tracked by an SMT solver.  However, there are some bits (like the
# :print-success option) that Many-SMT has to track on its own.  The relevant
# state is wrapped up in an instance of this class.

class ManySMT(object):

    __slots__ = (
        "all_solvers",

        "living_solvers",

        # Solver with a staisfying model.
        "satisfied_solver",

        # Commands that "matter".  Some solvers can't be interrupted while checking
        # for satisfiability; for those solvers, we kill them and then replay these
        # commands in order.
        "commands_so_far",

        # True if the SMT-LIB option :print-success is enabled.  If enabled, then
        # many-smt must output "success" after each successful command.
        "print_success",
    )

    def __init__(self) -> None:
        self.all_solvers: list[list[str]] = []
        self.living_solvers: list[SolverProcess] = []
        self.satisfied_solver: Optional[SolverProcess] = None
        self.commands_so_far: list[str] = []
        self.print_success: bool = True

    def start(self, solvers_to_spawn: Sequence[Sequence[str]]) -> None:
        self.all_solvers = [list(argv) for argv in solvers_to_spawn]
        solvers = self.living_solvers
        assert not solvers

        for argv in solvers_to_spawn:
            try:
                solver = SolverProcess(argv)
                solvers.append(solver)
                log_note("Started solver {}".format(solver))
            except FileNotFoundError:
                log_warning("Solver {} not found".format(argv[0]))

        for cmd in INIT_COMMANDS:
            for s in solvers:
                s.send(cmd)
            sync(solvers)

        self.satisfied_solver = None
        self.commands_so_far = list(INIT_COMMANDS)
        self.print_success = True

    def close(self) -> None:
        if hasattr(self, "living_solvers"):
            solvers = self.living_solvers
            for s in solvers:
                s.close()
            solvers.clear()

    def exec(self, sexp: SExp) -> None:
        solvers = self.living_solvers = [s for s in self.living_solvers if s.alive]

        log_debug("Next command is {!r} [check_sat={}, inspect={}]".format(sexp, is_check_sat(sexp), is_inspect_command(sexp)))

        # Some solvers (e.g. CVC4 version 1.7) will hang if you try to send
        # them a single-character atom instead of an SMT-LIB command.  We
        # can prevent this bad behavior by insulating the solvers a bit.
        if isinstance(sexp, str):
            die("Not a legal command: {!r}".format(sexp))

        # Rewrite (push) to (push 1) and (pop) to (pop 1).
        # See tests/push.sh.
        if sexp == ["push"]:
            sexp = ["push", "1"]
        if sexp == ["pop"]:
            sexp = ["pop", "1"]

        sexp_str = serialize_sexp(sexp)

        # Some solvers might be line-buffered, in which case we should
        # politely give them a newline.
        sexp_str += "\n"

        if is_check_sat(sexp):
            for s in solvers:
                s.send(sexp_str)

            waiting_solvers = list(solvers)
            got_output = False
            while waiting_solvers:
                solver, res = next_response(waiting_solvers)
                log_note("Solver {} responded with {}".format(solver, res))
                waiting_solvers.remove(solver)
                if is_error(res):
                    solver.close()
                elif res != "unknown":
                    got_output = True
                    emit_output(serialize_sexp(res))
                    if res == "sat":
                        self.satisfied_solver = solver
                    break
            if waiting_solvers:
                for s in waiting_solvers:
                    s.abort_check_sat(self.commands_so_far)
            if not got_output:
                emit_output("unknown")
            sync(waiting_solvers)
        elif is_inspect_command(sexp):
            if self.satisfied_solver is not None:
                self.satisfied_solver.send(sexp_str)
                _, res = next_response([self.satisfied_solver])
                emit_output(serialize_sexp(res))
            else:
                output_error("No model is available")
        elif is_echo(sexp):
            emit_output(serialize_sexp(sexp[1]))
        elif is_set_option(sexp) and sexp[1] == ":print-success":
            self.print_success = (sexp[2] == "true")
            self.print_success_if_necessary()
        elif is_set_option(sexp) and sexp[1] in (":produce-assertions", ":interactive-mode"):
            if sexp[2] == "true":
                emit_output("unsupported")
            elif sexp[2] == "false":
                self.print_success_if_necessary()
            else:
                die("Illegal value {!r} for option {}".format(sexp[2], sexp[1]))
        elif is_get_info(sexp):
            request = sexp[1]
            if request == ":all-statistics":
                stats = {
                    ":available-solvers": "({})".format(" ".join(encode_smtlib_str(str(s)) for s in solvers)),
                }
                emit_output("({})".format(" ".join("{} {}".format(k, v) for k, v in stats.items())))
            elif request == ":authors":
                emit_output("(:authors {})".format(encode_smtlib_str(SOLVER_AUTHORS)))
            elif request == ":error-behavior":
                emit_output("(:error-behavior immediate-exit)")
            elif request == ":name":
                emit_output("(:name {})".format(encode_smtlib_str(SOLVER_NAME)))
            elif request == ":version":
                # NOTE 2021/5/17: standard says "The response is a string literal with the version
                # number of the solver (e.g., '1.2')."  However, this disagrees with other get-info
                # responses since they are prefixed with an attribute keyword like ":name".  Z3 and
                # CVC4 both output "(:version ___)", and the grammar figures indicate that it should
                # be done this way, so I'm going to do it this way.
                emit_output("(:version {})".format(encode_smtlib_str(SOLVER_VERSION)))
            else:
                emit_output("unsupported")
        elif is_get_assertions(sexp):
            die(":produce-assertions mode is not supported")
        elif is_exit(sexp):
            # The solvers SHOULD exit when their parent process exits, so
            # this cleanup isn't strictly required.  Still, I think it's a
            # good idea in case one of the solvers is hanging.
            self.close()
            sys.exit(0)
        elif is_reset(sexp):
            # The simplest way to implement (reset) is to just terminate all the open solvers
            # and re-open them.  This has the advantage of restarting solvers that died with
            # errors earlier.
            #
            # A tempting hybrid approach would be to send (reset) to all the solvers that are
            # still alive and only restart the dead ones.  Unfortunately, that appraoch WON'T
            # WORK (tested 2021/5/18 with CVC4 1.8 and Z3 4.8.10).  The problem is that some
            # solvers (e.g. CVC4) retain the :print-success option after a (reset) and will
            # print "success".  Others (e.g. Z3) do a more complete reset and do not retain
            # the :print-success option.  Handling such a disagreement would involve a lot of
            # special-casing, so we'll just take the simple approach above instead.
            self.close()
            self.start(self.all_solvers)
            self.print_success_if_necessary()
        else:
            for s in solvers:
                s.send(sexp_str)
            self.commands_so_far.append(sexp_str)
            self.satisfied_solver = None
            sync(solvers)
            if any(s.alive for s in solvers):
                self.print_success_if_necessary()
            else:
                die("No solvers are available")

    def print_success_if_necessary(self) -> None:
        if self.print_success:
            emit_output("success")

# ----------------------------------------------------------------------
# Program entry point

def run(argv: Sequence[str]) -> None:
    p = argparse.ArgumentParser(description='Run multiple SMT solvers in parallel.')
    p.add_argument("-i", "--info",
        help="Show information about configuration and available solvers, then exit.  "
             "In this mode ManySMT ignores stdin and pretends as if its input was simply "
             "'(get-info :all-statistics)'.",
        action="store_true")
    p.add_argument("--debug", action="store_true")
    args = p.parse_args(argv)

    if args.debug:
        set_debug(True)

    solvers = decode_solvers(";".join([
        os.getenv("MANYSMT_SOLVERS", encode_solvers(DEFAULT_SOLVERS)),
        os.getenv("MANYSMT_EXTRA_SOLVERS", "")]))

    # Incremental parser for input commands.
    sp = IncrementalSExpParser()
    stdin_unbuffered = io.open(sys.stdin.fileno(), 'rb', closefd=False, buffering=0)

    smt = ManySMT()
    try:
        smt.start(solvers)

        if args.info:

            smt.exec(["get-info", ":all-statistics"])

        else:

            while True:

                block = stdin_unbuffered.read(1024)
                log_debug("Read {} bytes from stdin".format(len(block)))

                for sexp in (sp.feed(block) if block else sp.feed_eof()):
                    smt.exec(sexp)

                if not block:
                    log_debug("No more input; stopping.")
                    break

    except KeyboardInterrupt:
        pass

    finally:
        smt.close()

if __name__ == "__main__":
    run(sys.argv[1:])
